==========================================
The Hitchhiker's Guide to Computer Science
==========================================

Far out in the uncharted backwaters of the unfashionable beginning of the 21st
century lies a small subset of human knowledge. Within this subset of human 
knowledge is an utterly insignificant little discipline whose Von 
Neumann–descended architecture is so amazingly primitive that it is still 
thought that RPN calculators are a pretty neat idea.

This discipline has—or rather had—a problem, which was this: Most of the people 
studying it were unhappy for pretty much of the time when trying to understand 
pointers and recursion. 
Many solutions were suggested for this problem, but most of these were largely 
concerned with the handling of little pieces of logic called locks and mutexes 
and whatnot, which is odd because on the whole, it wasn’t the small pieces of 
logic that needed parallelism. And so the problem remained. Lots of people were 
mean, and most of them were miserable, even those with RPN calculators. 
Many were increasingly of the opinion that they’d all made a big mistake in 
trying to add parallelism to their programming languages, and that no program 
should have ever left its initial thread.

Parodying The Hitchhiker's Guide to the Galaxy is fun. Go buy it now if you
haven't already. It's a terrific comedy and science fiction book. 
This book is so interesting I lay tranquillised for 90 minutes yesterday 
instead of the usual 40 minutes because I couldn't stop reading. Thanks to 
the avocado for hitting my leg, almost missed lunch. Like I said, go buy it.

Go! I'll wait.

-----------
Don't Panic
-----------

Hi. Today (or whatever day you are reading this—even tomorrow), I’m going to 
tell you about ..........

Despite the fact that ever since the start of the 'damn panic' (wait a minute, 
I mean the pandemic), I have been remiss in responding to calls and messages
(sorry for my thoughtlessness), university students and boys I left at secondary 
in 2014 BC (Before Covid) nonetheless do occasionally call and message me asking 
for career advice, and since am in a good mood today, I thought I'd write up my 
standard advice which they can read, laugh at, and ignore. 

Frankly speaking (wait! am typing ...), being brash enough enough never to bother 
asking your elders for advice is actually a good thing, especially in the field 
of computer science and ICT, because elders are apt to say goofy, antediluvian 
things ..........

I, too, have no idea what I'm talking about when I give advice to students. I'm 
so hopelessly out of date that I still use Nokia 2760, hoping to flip it and 
instantly get surrounded by pretty ladies, whose bust to hip ratio is related 
to the golden ratio (φ). Why? Well, obviously, everyone knows that the golden 
ratio (φ) is the perfect aesthetic. Wake up Ayiko! It's almost 2021.

So you'd be better off ignoring what I'm saying here and instead ..........

So what was I talking about? Ah, yes! Advice.

Without further ado, I'm going to throw you in at the deep end. Here's Ayiko's 
simple seven-point advice (a.k.a AyWays) for you. (worth what you paid for them):
	---------------------------------------------------------
	1. Learn how to write and give a good talk before graduating. 
	2. Learn microeconomics before graduating.
	3. Don't bunk off non-CS classes just because they're boring.
	4. Learn C before graduating (because I said so, that's why).
    5. Enjoy those math-intensive courses.
	6. Stop worrying about 'there are no jobs' slogan.
	7. Get a good internship.
	---------------------------------------------------------
This is really easy. Don't think—just follow the plan!

Now for the explanations, unless you’re a patsy to do all that stuff just because I 
said so, in which case add: 8. Watch The Three Idiots, this a guerilla guide to life 
at campus just for you. See! I even give bonuses.

Learn how to write and give a good talk before graduating
---------------------------------------------------------

Yup! You read that right. Learn to write folks. 
Even on the small scale, when you look at any company, the employees with the most power 
and influence are the ones who can write and speak in English clearly, convincingly, and 
comfortably. Also it helps to be tall, but you can’t do anything about that.

By writing clear comments and technical specs, they let others understand their work, which 
means other employees can use and work with their work instead of redoing it.

Most recruiters won’t hire an employee unless they can write, and write well, in English. 
If you can write, wherever you get hired, you’ll soon find that you’re getting asked to 
write the specifications and that means you’re already leveraging your influence and 
getting noticed by management

Take those write intensive course units seriously, that is those in which you write an awful 
lot to pass them. Start a journal. The more you write, the easier it will be, and the easier 
it is to write, the more you’ll write, in a virtuous circle.

Stop worrying about 'there are no jobs' slogan.
-----------------------------------------------

For this let me motivate you first.

Go to any coffee shop near you and ask them if they have job openings, 
they'll say something like, "yes, we have n openings now," where n is a 

very nice round integer like "0" or "3". Once they hire the n people, they 
won’t hire any more people. 
But, Why not Ayiko? Hoho! am glad you asked. It's because for them customer 
demand is fixed. There must be enough employees to meet that demand, or the 
queue becomes too long and people will walk out, but after that point, hiring 
more people is pointless.

Almost most tech companies have a general policy of "we'll hire any good technical 
people we can get". I normally get asked the question "which course has market and 
is high paying". That’s so wrong for so many reasons. First, trying to choose a 
career based on a current business fad is foolish.

Yes, there are a bunch of out of work IT people making a lot of noise about how long 
they’ve been out of work, but you know what? At the risk of pissing them off, really 
good programmers do have jobs.

Don't bunk non-CS classes just because they're boring.
------------------------------------------------------

Jokes aside, this is a way to get a lower CGPA.

Your CGPA is a big deal! Never ever underestimate it even though it's got its problems,
for instance, it doesn't says whether you got that CGPA taking easy classes in home 
economics at Oboloko Community University, or taking graduate level Quantum Mechanics at MUK.

Lots and lots of recruiters go straight to the CGPA when perusing a resume, and 
they're not going to apologize for it anyway. First, they screen out all the 2.5 
CGPAs from Oboloko Community, then ask for transcripts and recommendations to 
look for consistently high grades, not just high grades in computer science course units.

Why? Glad you asked again! Because that thing, more than any other one number, 
reflects the sum of what dozens of professors over a long period of time in many 
different situations think about your work. UACE scores? Ha! That's one test or 
two over a few hours. The GPA reflects hundreds of papers and assignments and 
classroom participations over four years. 

We had these course units which involved things to do with history and anthropology
and every one loved it.

Everyone loved it? Well, I lied. I had to read these incredibly monotonous books about
Red Indians, which are not very interesting to me. No offence! & and I hope none taken.

Some times the lectures got wearisome that I longed for something more exciting, 
like watching grass grow. I completely lost interest and my eyes even teared because of
the endless discussions of eating grand parents. I don’t know why the Red Indians 
eat their parents, I can’t remember any more, it’s incredibly boring, but it was 
going to be in the test and exams, so I had no choice but to read. I eventually decided 
that the course unit was going to be my boredom gauntlet. If I could get an A in a class 
where the tests required me to learn all about potlatch blankets, I could handle anything, 
no matter how boring. The next time I accidentally get stuck in Jinja Road jam for 4 hours, 
I could thank my studies of the Red Indians for making it seem pleasant by comparison.

Understanding those things was basically a fulltime job. Every time I came out of 
the lecture without tears was basically a victory

It was my only A that semester. If I could do it, you can do it.

Learn microeconomics before graduating
--------------------------------------

Econ has many useful theories and facts that make sense, can be proven in the field, etc., 
Anyone in their right sense of mind should learn it because you have to know about supply 
and demand, you have to know about competitive advantage, and you have to understand NPVs and 
discounting and marginal utility before you’ll have any idea why business works the way it does.

Why should CS or Engineering majors learn econ? Simply because a programmer or engineer who 
understands the fundamentals of business is going to be a more valuable employee, to a business, 
than a programmer who doesn’t. That’s all there is to it.

I've seen and been frustrated by engineers with crazy ideas that make sense in engineering but 
don’t make sense in capitalism, for example, spending months building something nobody wants. 
If you understand this stuff, you’re and will get rewarded for it, for reasons which you'll 
also learn in microeconomics.

Learn C before graduating
-------------------------

If while (*s++ = *t++); isn’t the most natural thing in the world to you yet you did computer
science and you're programming, get out of here! you’re programming based on superstition. Just 
like a medical doctor who doesn’t know basic anatomy, passing out prescriptions based on what the 
pharma sales babe said would work.

C is much closer to the machine than "modern" languages that you’ll be taught in college like 
Java, Python, my grand mother Ruby, whatever trendy junk they teach these days. You need to 
spend at least a semester getting close to the machine or you’ll never be able to create 
efficient code in higher level languages.

If you didn't to CS like me, at least learn a programming language. It just makes you cooler,
smarter. Well don't ask me why because that what most of our ancestors said in the 1400s when
when they were told to learn how to write but look today how many people know how to write.


I thought about how charming he was and wished I had a daughter so I could forbid her to marry him.
But then I wouldn't need to, he has got as much sex appeal as a road accident.

Don't expect to learn enough practical skills
---------------------------------------------

Every year, the deans at top engineering institutions of higher education welcome the freshers 
with the same implicit message: "You got into this elite institution. Your worries are over. 
You're set for life." But that's probably the kind of thing that's true only if you don't 
believe it. Lucky for me, an oldtimer told me not to believe and he's Ayiko Fred (hey, that's me)

The moral of the story is that computer science, or that engineering course of yours, is not the 
same as software development or working in a company. If you’re really really lucky, your 
institution might have a decent software development curriculum, although, they might not, 
because most universities think that teaching practical skills is better left to the 
technical-vocational institutes and the prison rehabilitation programs. You can learn mere 
programming anywhere. 

You'll realise that in university they're actually teaching you to learn how to learn and when 
you start applying it in the industry, that when it all falls together. You think your 12 million 
tuition entititles you to learn about everything? There are some practical aspects which simply 
can't be taught in a class room. They simply can't put you in a 100 person project, they cant put 
you in a project which has been running for 10 years, they cant put you in a position where you'll 
be managed, where you'll have to work with others. So what they hope (by 'they' I mean universities,
if am not clear). when you graduate you will fit fairly easily in the industry, OK? Am out of here!

Get a good internship
---------------------



-------------------------------------
So Long, and Thanks for All the Fish!
-------------------------------------

Should you follow my advice, you, too, may end up selling stock in the new or old 
taxi park way too soon, turning down jobs at MTN because you want your own office 
with a door, and other stupid life decisions, but they won't be my fault. I told 
you not to listen to me.

Thanks to @??????? and @...... for the proof reading and cool music.

Did you buy The Hitchhiker's Guide to the Galaxy yet? Go! That was just the 
introduction!
